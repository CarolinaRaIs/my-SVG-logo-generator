// Import necessary packages
const inquirer = require('inquirer');
const svgCaptcha = require('svg-captcha');
const fs = require('fs');

// Prompt the user for input using inquirer
inquirer
    .prompt([
    {  
      name: 'text',
      message: 'Enter up to three characters for the logo:',
      //The comparison input.length <= 3 checks if the length of the input is less than or equal to 3.
      //The function returns a boolean value (true or false) based on the result of the comparison.
      validate: (input) => input.length <= 3,
    },
    {
      name: 'textColor',
      message: 'Enter the text color (keyword or hexadecimal):',
    },
    {
      type: 'list',
      name: 'shape',
      message: 'Choose a shape:',
      choices: ['circle', 'triangle', 'square'],
    },
    {
      name: 'shapeColor',
      message: 'Enter the shape color (keyword or hexadecimal):',
    },
  ])
  // then() =  built in method of Promise object used to handle fullfillment/rejection of Promise.
  .then((answers) => {
    // Generating the SVG image by calling the svgCaptcha function with the text property of the answers object and saving it to a file
    // svgCaptcha(text, options)
    // .data is used to access the SVG image data generated by the svgCaptcha() function.
        //necessary because we need to pass the SVG image data to the response object of an HTTP server, which is used to send the image to the client's web browser
        //svg variable will be passed to the response object (later in the code)
    const svg = svgCaptcha(answers.text, {
        size: 4,
        noise: 1,
        color: true,
        background: answers.shapeColor,
        width: 300,
        height: 200,
        fontSize: 80,
        charPreset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
        ignoreChars: '0o1i',
      }).data;

    // Save the SVG image to a file (logo.svg)
        //How: write the generated SVG image to a file named logo.svg using the fs.writeFile() method, and log a message to the console indicating whether the file was written successfully or not.
        // fs.writeFile() method used to write data to a file
        // logo.svg = arg 1 = filename of the file to be written
        // svg = arg 2 = data to be written to the file (svg variable that holds the generated SVG image)
        // (err) =>  = callback function that is called when file is written or an error occurs
        // If there is an error, the throw keyword will immediately stop the execution of the code and throw an error.
    fs.writeFile('logo.svg', svg, (err) => {
    if (err) throw err;
    // If there is no error a message will be printed
    console.log('Logo saved to logo.svg');
    });
  });
